算法备注：
1. 使用三进制生成的新的列没有经过去重复、去相反的判断
2. 对unbalance的列使用近似KNN的算法调整
3. 过程打印了非常多的log，用来分析算法效果
4. 要添加修改的列数量站所有列数量的比例
5. 要添加修改后的列的结果对比
6. 只要簇中包含小类样本就会收录
7. 修改决定每个簇是否要保留的条件：当簇中包含小类样本个数超过一半的时候就留下
8. 使用Birch来聚类
9. 添加小类样本限制
10. 防止小类样本完全霸占整个类
11. 生成过程中添加了去重复去掉相反的无用处理
12. 生成matrix的过程添加了至少要生产logN个column的条件限制
13. 将大类样本下采样


SVM classifier
Time: 2019-01-22 21:38:21
FS: variance_threshold
Dataset： wine
ECOC: SAT_ECOC DR
Using KNN-Decoding
**-----------  init matrix info --------------**
matrix
[[ 1. -1. -1.]
 [ 1.  1.  1.]
 [-1. -1.  1.]]
------------------------------
column 0 info:
pos_neg_r_train : 3.240000
pos_neg_r_test : 1.400000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({1.0: 21, -1.0: 15})
classifier acc is 1.000000
------------------------------
column 1 info:
pos_neg_r_train : 0.830000
pos_neg_r_test : 0.200000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 30, 1.0: 6})
classifier acc is 0.580000
------------------------------
column 2 info:
pos_neg_r_train : 2.210000
pos_neg_r_test : 1.400000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({1.0: 22, -1.0: 14})
classifier acc is 0.170000
confusion matrix
[[15  0  0]
 [ 0  6  0]
 [ 0  0 15]]
row HD
[[0.   0.67 0.67]
 [0.   0.   0.67]
 [0.   0.   0.  ]]
col HD
[[0.   0.67 0.67]
 [0.   0.   0.67]
 [0.   0.   0.  ]]
*---------------------iter 0------------------------------*
**-----------  current matrix info --------------**
------------------------------
matrix
[-1.  1. -1.]
column 0 info:
pos_neg_r_train : 0.830000
pos_neg_r_test : 0.200000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1, 21: 1, 22: 1, 23: 1, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1, 29: 1, 30: 1, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1})
classifier acc is 1.000000
confusion matrix
[[15  0  0]
 [ 0  6  0]
 [15  0  0]]
row HD
0
col HD
0
average_class_acc 0.670000
cplx_class_threhold 0.600000
cplx_class {0: None, 1: None, 2: True}
select_i_column [-1.0, 1.0, 1.0]
select_j_column [-1.0, 1.0, 1.0]
most_cplx_inx is 2
change no bit!
*---------------------iter 1------------------------------*
**-----------  current matrix info --------------**
matrix
[[-1.  1.]
 [ 1.  0.]
 [-1. -1.]]
------------------------------
column 0 info:
pos_neg_r_train : 0.830000
pos_neg_r_test : 0.200000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 30, 1.0: 6})
classifier acc is 1.000000
------------------------------
column 1 info:
pos_neg_r_train : 1.320000
pos_neg_r_test : 1.000000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 15, 1.0: 15, 0.0: 6})
classifier acc is 0.500000
confusion matrix
[[15  0  0]
 [ 0  6  0]
 [ 0  0 15]]
row HD
[[0.   0.67 0.33]
 [0.   0.   0.67]
 [0.   0.   0.  ]]
col HD
[[0.   0.67 0.33]
 [0.   0.   0.67]
 [0.   0.   0.  ]]
average_class_acc 1.000000
cplx_class_threhold 0.900000
cplx_class {0: None, 1: None, 2: None}
total_cplx_class_num == 0 break
change ratio is:	0.0
** ---------- before cutting, the new column performance -----------**
matrix
[[-1.  1.]
 [ 1.  0.]
 [-1. -1.]]
------------------------------
column 0 info:
pos_neg_r_train : 0.830000
pos_neg_r_test : 0.200000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 30, 1.0: 6})
classifier acc is 1.000000
------------------------------
column 1 info:
pos_neg_r_train : 1.320000
pos_neg_r_test : 1.000000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 15, 1.0: 15, 0.0: 6})
classifier acc is 0.500000
confusion matrix
[[15  0  0]
 [ 0  6  0]
 [ 0  0 15]]
row HD
[[0.   0.67 0.33]
 [0.   0.   0.67]
 [0.   0.   0.  ]]
col HD
[[0.   0.67 0.33]
 [0.   0.   0.67]
 [0.   0.   0.  ]]
** ---------- after cutting, the new column performance ------------**
matrix
[[-1.  1.]
 [ 1.  0.]
 [-1. -1.]]
------------------------------
column 0 info:
pos_neg_r_train : 0.830000
pos_neg_r_test : 0.200000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 30, 1.0: 6})
classifier acc is 1.000000
------------------------------
column 1 info:
pos_neg_r_train : 1.320000
pos_neg_r_test : 1.000000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 15, 1.0: 15, 0.0: 6})
classifier acc is 0.500000
confusion matrix
[[15  0  0]
 [ 0  6  0]
 [ 0  0 15]]
row HD
[[0.   0.67 0.33]
 [0.   0.   0.67]
 [0.   0.   0.  ]]
col HD
[[0.   0.67 0.33]
 [0.   0.   0.67]
 [0.   0.   0.  ]]


SVM classifier
Time: 2019-01-22 21:38:21
FS: variance_threshold
Dataset： wine
ECOC: SAT_ECOC SR
Using KNN-Decoding
**-----------  init matrix info --------------**
matrix
[[ 0. -1. -1. -1.]
 [-1.  1.  0.  1.]
 [ 1. -1.  1.  1.]]
------------------------------
column 0 info:
pos_neg_r_train : 0.520000
pos_neg_r_test : 2.500000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({1.0: 15, 0.0: 15, -1.0: 6})
classifier acc is 1.000000
------------------------------
column 1 info:
pos_neg_r_train : 0.830000
pos_neg_r_test : 0.200000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 30, 1.0: 6})
classifier acc is 0.000000
------------------------------
column 2 info:
pos_neg_r_train : 0.760000
pos_neg_r_test : 1.000000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({1.0: 15, -1.0: 15, 0.0: 6})
classifier acc is 0.500000
------------------------------
column 3 info:
pos_neg_r_train : 2.210000
pos_neg_r_test : 1.400000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({1.0: 22, -1.0: 14})
classifier acc is 0.420000
confusion matrix
[[15  0  0]
 [ 0  6  0]
 [ 0  0 15]]
row HD
[[0.   1.33 1.  ]
 [0.   0.   1.  ]
 [0.   0.   0.  ]]
col HD
[[0.   1.33 1.  ]
 [0.   0.   1.  ]
 [0.   0.   0.  ]]
*---------------------iter 0------------------------------*
**-----------  current matrix info --------------**
------------------------------
matrix
[-1.  1.  1.]
column 0 info:
pos_neg_r_train : 2.210000
pos_neg_r_test : 1.400000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1, 21: 1, 22: 1, 23: 1, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1, 29: 1, 30: 1, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1})
classifier acc is 0.970000
confusion matrix
[[14  1  0]
 [ 0  6  0]
 [ 0 15  0]]
row HD
0
col HD
0
average_class_acc 0.640000
cplx_class_threhold 0.580000
cplx_class {0: None, 1: None, 2: True}
select_i_column [-1.0, 1.0, -1.0]
select_j_column [-1.0, 1.0, -1.0]
most_cplx_inx is 2
change no bit!
*---------------------iter 1------------------------------*
**-----------  current matrix info --------------**
matrix
[[-1. -1.]
 [ 1.  1.]
 [ 1. -1.]]
------------------------------
column 0 info:
pos_neg_r_train : 2.210000
pos_neg_r_test : 1.400000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({1.0: 22, -1.0: 14})
classifier acc is 0.970000
------------------------------
column 1 info:
pos_neg_r_train : 0.830000
pos_neg_r_test : 0.200000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 30, 1.0: 6})
classifier acc is 0.560000
confusion matrix
[[14  0  1]
 [ 0  6  0]
 [ 0  0 15]]
row HD
[[0.   0.67 0.33]
 [0.   0.   0.33]
 [0.   0.   0.  ]]
col HD
[[0.   0.67 0.33]
 [0.   0.   0.33]
 [0.   0.   0.  ]]
average_class_acc 0.980000
cplx_class_threhold 0.880000
cplx_class {0: None, 1: None, 2: None}
total_cplx_class_num == 0 break
change ratio is:	0.0
** ---------- before cutting, the new column performance -----------**
matrix
[[-1. -1.]
 [ 1.  1.]
 [ 1. -1.]]
------------------------------
column 0 info:
pos_neg_r_train : 2.210000
pos_neg_r_test : 1.400000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({1.0: 22, -1.0: 14})
classifier acc is 0.970000
------------------------------
column 1 info:
pos_neg_r_train : 0.830000
pos_neg_r_test : 0.200000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 30, 1.0: 6})
classifier acc is 0.560000
confusion matrix
[[14  0  1]
 [ 0  6  0]
 [ 0  0 15]]
row HD
[[0.   0.67 0.33]
 [0.   0.   0.33]
 [0.   0.   0.  ]]
col HD
[[0.   0.67 0.33]
 [0.   0.   0.33]
 [0.   0.   0.  ]]
** ---------- after cutting, the new column performance ------------**
matrix
[[-1.]
 [ 1.]
 [-1.]]
------------------------------
column 0 info:
pos_neg_r_train : 0.830000
pos_neg_r_test : 0.200000
count train Counter({'2': 48, '1': 33, '3': 25})
count test Counter({'3': 15, '1': 15, '2': 6})
count pred Counter({-1.0: 30, 1.0: 6})
classifier acc is 1.000000
confusion matrix
[[15  0  0]
 [ 0  6  0]
 [15  0  0]]
row HD
[[0.   0.33 0.  ]
 [0.   0.   0.33]
 [0.   0.   0.  ]]
col HD
[[0.   0.33 0.  ]
 [0.   0.   0.33]
 [0.   0.   0.  ]]


SVM classifier
Time: 2019-01-22 21:38:22
FS: variance_threshold
Dataset： winequality-red
ECOC: SAT_ECOC DR
Using KNN-Decoding
**-----------  init matrix info --------------**
matrix
[[ 1.  1. -1.  1. -1. -1.  1.]
 [-1. -1. -1.  1. -1.  1.  1.]
 [ 1.  1. -1.  1.  1. -1. -1.]
 [ 1.  1. -1.  1.  1.  1.  1.]
 [ 1. -1. -1. -1.  1.  1.  1.]
 [ 1. -1.  1. -1. -1. -1. -1.]]
------------------------------
column 0 info:
pos_neg_r_train : 29.940000
pos_neg_r_test : 44.710000
count train Counter({'5': 417, '6': 389, '7': 107, '4': 31, '8': 11, '3': 4})
count test Counter({'6': 132, '5': 131, '7': 46, '4': 7, '8': 4})
count pred Counter({1.0: 320})
classifier acc is 0.980000
------------------------------
column 1 info:
pos_neg_r_train : 5.440000
pos_neg_r_test : 4.610000
count train Counter({'5': 417, '6': 389, '7': 107, '4': 31, '8': 11, '3': 4})
count test Counter({'6': 132, '5': 131, '7': 46, '4': 7, '8': 4})
count pred Counter({1.0: 320})
classifier acc is 0.820000
------------------------------
column 2 info:
pos_neg_r_train : 0.010000
pos_neg_r_test : 0.010000
count train Counter({'5': 417, '6': 389, '7': 107, '4': 31, '8': 11, '3': 4})
count test Counter({'6': 132, '5': 131, '7': 46, '4': 7, '8': 4})
count pred Counter({-1.0: 320})
classifier acc is 0.010000
------------------------------
column 3 info:
pos_neg_r_train : 7.130000
pos_neg_r_test : 5.400000
count train Counter({'5': 417, '6': 389, '7': 107, '4': 31, '8': 11, '3': 4})
count test Counter({'6': 132, '5': 131, '7': 46, '4': 7, '8': 4})
count pred Counter({1.0: 320})
classifier acc is 0.840000
------------------------------
column 4 info:
pos_neg_r_train : 19.850000
pos_neg_r_test : 28.090000
count train Counter({'5': 417, '6': 389, '7': 107, '4': 31, '8': 11, '3': 4})
count test Counter({'6': 132, '5': 131, '7': 46, '4': 7, '8': 4})
count pred Counter({1.0: 320})
classifier acc is 0.970000
------------------------------
column 5 info:
pos_neg_r_train : 1.220000
pos_neg_r_test : 1.370000
count train Counter({'5': 417, '6': 389, '7': 107, '4': 31, '8': 11, '3': 4})
count test Counter({'6': 132, '5': 131, '7': 46, '4': 7, '8': 4})
count pred Counter({-1.0: 166, 1.0: 154})
classifier acc is 0.580000
------------------------------
column 6 info:
pos_neg_r_train : 1.240000
pos_neg_r_test : 1.370000
count train Counter({'5': 417, '6': 389, '7': 107, '4': 31, '8': 11, '3': 4})
count test Counter({'6': 132, '5': 131, '7': 46, '4': 7, '8': 4})
count pred Counter({-1.0: 162, 1.0: 158})
classifier acc is 0.580000
confusion matrix
[[  0   0   0   0   0   0]
 [  1   0   6   0   0   0]
 [  1   0 105  25   0   0]
 [  2   0  46  84   0   0]
 [  0   0   5  41   0   0]
 [  0   0   0   4   0   0]]
row HD
[[0.   0.5  0.33 0.33 0.67 0.67]
 [0.   0.   0.83 0.5  0.5  0.83]
 [0.   0.   0.   0.33 0.67 0.67]
 [0.   0.   0.   0.   0.33 1.  ]
 [0.   0.   0.   0.   0.   0.67]
 [0.   0.   0.   0.   0.   0.  ]]
col HD
[[0.   0.5  0.33 0.33 0.67 0.67]
 [0.   0.   0.83 0.5  0.5  0.83]
 [0.   0.   0.   0.33 0.67 0.67]
 [0.   0.   0.   0.   0.33 1.  ]
 [0.   0.   0.   0.   0.   0.67]
 [0.   0.   0.   0.   0.   0.  ]]
*---------------------iter 0------------------------------*
**-----------  current matrix info --------------**
------------------------------
matrix
[ 1. -1.  1.  1.  1.  1.]
column 0 info:
pos_neg_r_train : 29.940000
pos_neg_r_test : 44.710000
count train Counter({'5': 417, '6': 389, '7': 107, '4': 31, '8': 11, '3': 4})
count test Counter({'6': 132, '5': 131, '7': 46, '4': 7, '8': 4})
count pred Counter({0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1, 21: 1, 22: 1, 23: 1, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1, 29: 1, 30: 1, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1, 36: 1, 37: 1, 38: 1, 39: 1, 40: 1, 41: 1, 42: 1, 43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 50: 1, 51: 1, 52: 1, 53: 1, 54: 1, 55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 61: 1, 62: 1, 63: 1, 64: 1, 65: 1, 66: 1, 67: 1, 68: 1, 69: 1, 70: 1, 71: 1, 72: 1, 73: 1, 74: 1, 75: 1, 76: 1, 77: 1, 78: 1, 79: 1, 80: 1, 81: 1, 82: 1, 83: 1, 84: 1, 85: 1, 86: 1, 87: 1, 88: 1, 89: 1, 90: 1, 91: 1, 92: 1, 93: 1, 94: 1, 95: 1, 96: 1, 97: 1, 98: 1, 99: 1, 100: 1, 101: 1, 102: 1, 103: 1, 104: 1, 105: 1, 106: 1, 107: 1, 108: 1, 109: 1, 110: 1, 111: 1, 112: 1, 113: 1, 114: 1, 115: 1, 116: 1, 117: 1, 118: 1, 119: 1, 120: 1, 121: 1, 122: 1, 123: 1, 124: 1, 125: 1, 126: 1, 127: 1, 128: 1, 129: 1, 130: 1, 131: 1, 132: 1, 133: 1, 134: 1, 135: 1, 136: 1, 137: 1, 138: 1, 139: 1, 140: 1, 141: 1, 142: 1, 143: 1, 144: 1, 145: 1, 146: 1, 147: 1, 148: 1, 149: 1, 150: 1, 151: 1, 152: 1, 153: 1, 154: 1, 155: 1, 156: 1, 157: 1, 158: 1, 159: 1, 160: 1, 161: 1, 162: 1, 163: 1, 164: 1, 165: 1, 166: 1, 167: 1, 168: 1, 169: 1, 170: 1, 171: 1, 172: 1, 173: 1, 174: 1, 175: 1, 176: 1, 177: 1, 178: 1, 179: 1, 180: 1, 181: 1, 182: 1, 183: 1, 184: 1, 185: 1, 186: 1, 187: 1, 188: 1, 189: 1, 190: 1, 191: 1, 192: 1, 193: 1, 194: 1, 195: 1, 196: 1, 197: 1, 198: 1, 199: 1, 200: 1, 201: 1, 202: 1, 203: 1, 204: 1, 205: 1, 206: 1, 207: 1, 208: 1, 209: 1, 210: 1, 211: 1, 212: 1, 213: 1, 214: 1, 215: 1, 216: 1, 217: 1, 218: 1, 219: 1, 220: 1, 221: 1, 222: 1, 223: 1, 224: 1, 225: 1, 226: 1, 227: 1, 228: 1, 229: 1, 230: 1, 231: 1, 232: 1, 233: 1, 234: 1, 235: 1, 236: 1, 237: 1, 238: 1, 239: 1, 240: 1, 241: 1, 242: 1, 243: 1, 244: 1, 245: 1, 246: 1, 247: 1, 248: 1, 249: 1, 250: 1, 251: 1, 252: 1, 253: 1, 254: 1, 255: 1, 256: 1, 257: 1, 258: 1, 259: 1, 260: 1, 261: 1, 262: 1, 263: 1, 264: 1, 265: 1, 266: 1, 267: 1, 268: 1, 269: 1, 270: 1, 271: 1, 272: 1, 273: 1, 274: 1, 275: 1, 276: 1, 277: 1, 278: 1, 279: 1, 280: 1, 281: 1, 282: 1, 283: 1, 284: 1, 285: 1, 286: 1, 287: 1, 288: 1, 289: 1, 290: 1, 291: 1, 292: 1, 293: 1, 294: 1, 295: 1, 296: 1, 297: 1, 298: 1, 299: 1, 300: 1, 301: 1, 302: 1, 303: 1, 304: 1, 305: 1, 306: 1, 307: 1, 308: 1, 309: 1, 310: 1, 311: 1, 312: 1, 313: 1, 314: 1, 315: 1, 316: 1, 317: 1, 318: 1, 319: 1})
classifier acc is 0.980000
confusion matrix
[[  0   0   0   0   0   0]
 [  7   0   0   0   0   0]
 [131   0   0   0   0   0]
 [132   0   0   0   0   0]
 [ 46   0   0   0   0   0]
 [  4   0   0   0   0   0]]
row HD
0
col HD
0
average_class_acc nan
cplx_class_threhold nan
cplx_class {0: None, 1: None, 2: None, 3: None, 4: None, 5: None}
